# Script PowerShell de Release Automatique
# Usage: .\release.ps1 [patch|minor|major]

param(
    [Parameter(Position=0)]
    [ValidateSet("patch", "minor", "major")]
    [string]$VersionType
)

# Configuration
$ErrorActionPreference = "Stop"

# Couleurs pour PowerShell
function Write-ColorOutput {
    param(
        [string]$Message,
        [string]$Color = "White"
    )
    Write-Host $Message -ForegroundColor $Color
}

function Write-Step {
    param([string]$Message)
    Write-ColorOutput "üîÑ $Message" "Cyan"
}

function Write-Success {
    param([string]$Message)
    Write-ColorOutput "‚úÖ $Message" "Green"
}

function Write-Error {
    param([string]$Message)
    Write-ColorOutput "‚ùå $Message" "Red"
}

function Write-Warning {
    param([string]$Message)
    Write-ColorOutput "‚ö†Ô∏è  $Message" "Yellow"
}

function Write-Info {
    param([string]$Message)
    Write-ColorOutput "‚Ñπ $Message" "Blue"
}

function Write-Title {
    param([string]$Message)
    Write-ColorOutput "üöÄ $Message" "Magenta"
}

# Fonction pour ex√©cuter une commande et v√©rifier le r√©sultat
function Invoke-Command {
    param(
        [string]$Command,
        [switch]$Silent,
        [switch]$IgnoreError
    )
    
    try {
        if ($Silent) {
            $result = Invoke-Expression $Command 2>$null
        } else {
            $result = Invoke-Expression $Command
        }
        return $result
    } catch {
        if (-not $IgnoreError) {
            Write-Error "Erreur lors de l'ex√©cution: $Command"
            Write-Error $_.Exception.Message
            exit 1
        }
        return $null
    }
}

# V√©rifier l'√©tat du repository
function Test-GitStatus {
    Write-Step "V√©rification de l'√©tat du repository..."
    
    # V√©rifier si on est sur la bonne branche
    $currentBranch = Invoke-Command "git branch --show-current" -Silent
    if ($currentBranch -ne "main") {
        Write-Error "Vous devez √™tre sur la branche main. Branche actuelle: $currentBranch"
        exit 1
    }
    
    # V√©rifier s'il y a des changements non commit√©es
    $status = Invoke-Command "git status --porcelain" -Silent
    if ($status) {
        Write-Warning "Il y a des changements non commit√©es:"
        Write-Host $status
        $continue = Read-Host "Voulez-vous continuer malgr√© les changements non commit√©es ? (y/N)"
        if ($continue.ToLower() -ne "y") {
            Write-Info "Release annul√©e"
            exit 0
        }
    }
    
    # V√©rifier si on est √† jour avec le remote
    Invoke-Command "git fetch" -Silent
    $behind = Invoke-Command "git rev-list --count HEAD..origin/main" -Silent -IgnoreError
    if ($behind -and [int]$behind -gt 0) {
        Write-Error "Votre branche locale est en retard de $behind commit(s). Faites un git pull d'abord."
        exit 1
    }
    
    Write-Success "Repository pr√™t pour la release"
}

# V√©rifier le CHANGELOG
function Test-Changelog {
    Write-Step "V√©rification du CHANGELOG..."
    
    if (-not (Test-Path "CHANGELOG.md")) {
        Write-Error "Fichier CHANGELOG.md non trouv√©"
        return $false
    }
    
    $changelog = Get-Content "CHANGELOG.md" -Raw
    if ($changelog -match "## \[Non publi√©\]\s*([\s\S]*?)(?=## \[|\n---|\n## L√©gende|$)") {
        $content = $matches[1].Trim()
        if (-not $content -or $content -eq "" -or -not $content.Contains("- ")) {
            Write-Error "Aucun changement dans la section [Non publi√©] du CHANGELOG"
            Write-Info "Ajoutez vos changements avant de faire une release"
            return $false
        }
    } else {
        Write-Error "Section [Non publi√©] non trouv√©e dans le CHANGELOG"
        return $false
    }
    
    Write-Success "CHANGELOG pr√™t avec des changements"
    return $true
}

# Afficher les changements √† publier
function Show-Changes {
    Write-Step "Changements √† publier:"
    
    $changelog = Get-Content "CHANGELOG.md" -Raw
    if ($changelog -match "## \[Non publi√©\]\s*([\s\S]*?)(?=## \[|\n---|\n## L√©gende|$)") {
        Write-ColorOutput $matches[1].Trim() "Yellow"
    }
    Write-Host ""
}

# Fonction principale
function Start-Release {
    Write-Title "üöÄ SCRIPT DE RELEASE AUTOMATIQUE üöÄ"
    Write-Host ""
    
    try {
        # V√©rifications pr√©liminaires
        Test-GitStatus
        
        if (-not (Test-Changelog)) {
            Write-Error "CHANGELOG non pr√™t. Ajoutez vos changements et relancez le script."
            exit 1
        }
        
        # Afficher les changements
        Show-Changes
        
        # Demander le type de version si pas fourni
        if (-not $VersionType) {
            Write-Host "Types de version disponibles:"
            Write-Host "  1. üêõ patch   - Corrections de bugs (1.3.0 ‚Üí 1.3.1)"
            Write-Host "  2. ‚ú® minor   - Nouvelles fonctionnalit√©s (1.3.0 ‚Üí 1.4.0)"
            Write-Host "  3. üöÄ major   - Breaking changes (1.3.0 ‚Üí 2.0.0)"
            Write-Host ""
            
            $choice = Read-Host "Choisissez le type de version (1/2/3)"
            
            switch ($choice) {
                "1" { $VersionType = "patch" }
                "2" { $VersionType = "minor" }
                "3" { $VersionType = "major" }
                default {
                    Write-Error "Choix invalide"
                    exit 1
                }
            }
        }
        
        # Confirmation finale
        $confirm = Read-Host "`n√ätes-vous s√ªr de vouloir cr√©er une version $VersionType ? (y/N)"
        if ($confirm.ToLower() -ne "y") {
            Write-Info "Release annul√©e"
            exit 0
        }
        
        Write-Host ""
        Write-Title "D√âBUT DE LA RELEASE $($VersionType.ToUpper())"
        
        # 1. Incr√©menter la version
        Write-Step "Incr√©mentation de la version ($VersionType)..."
        Invoke-Command "npm run version:$VersionType"
        
        # R√©cup√©rer la nouvelle version
        $packageJson = Get-Content "package.json" | ConvertFrom-Json
        $newVersion = $packageJson.version
        Write-Success "Version incr√©ment√©e: v$newVersion"
        
        # 2. Commiter les changements
        Write-Step "Commit des changements de version..."
        Invoke-Command "git add package.json CHANGELOG.md src/components/admin/VersionInfo.tsx"
        Invoke-Command "git commit -m `"chore: bump version to v$newVersion`""
        Write-Success "Changements commit√©es"
        
        # 3. Cr√©er le tag
        Write-Step "Cr√©ation du tag..."
        Invoke-Command "git tag v$newVersion"
        Write-Success "Tag v$newVersion cr√©√©"
        
        # 4. Pousser vers le remote
        Write-Step "Push vers le repository..."
        Invoke-Command "git push origin main"
        Invoke-Command "git push origin --tags"
        Write-Success "Changements pouss√©s vers le repository"
        
        # 5. Informations finales
        Write-Step "D√©clenchement du d√©ploiement automatique..."
        Write-Info "Le workflow GitHub Actions va maintenant:"
        Write-Info "  1. Builder l'application"
        Write-Info "  2. D√©ployer sur GitHub Pages"
        Write-Info "  3. Rendre la nouvelle version disponible"
        
        Write-Host ""
        Write-Title "üéâ RELEASE TERMIN√âE AVEC SUCC√àS ! üéâ"
        Write-Host ""
        Write-Success "Version v$newVersion cr√©√©e et d√©ploy√©e"
        Write-Info "URL de production: https://collectifilefeydeau.github.io/1Hall1Artiste/"
        Write-Info "Surveillez le workflow: https://github.com/CollectifIleFeydeau/1Hall1Artiste/actions"
        
    } catch {
        Write-Error "Erreur durant la release:"
        Write-Error $_.Exception.Message
        exit 1
    }
}

# Afficher l'aide si demand√©
if ($args -contains "--help" -or $args -contains "-h") {
    Write-Host @"
üöÄ Script de Release Automatique PowerShell

Usage:
  .\release.ps1 [patch|minor|major]

Exemples:
  .\release.ps1           # Mode interactif
  .\release.ps1 patch     # Release patch directe
  .\release.ps1 minor     # Release minor directe
  .\release.ps1 major     # Release major directe

Ce script va:
  1. V√©rifier l'√©tat du repository Git
  2. V√©rifier le CHANGELOG
  3. Demander le type de version (si pas fourni)
  4. Incr√©menter la version
  5. Commiter et taguer
  6. Pousser vers GitHub
  7. D√©clencher le d√©ploiement automatique

Pr√©requis:
  - √ätre sur la branche main
  - Avoir des changements dans la section [Non publi√©] du CHANGELOG
  - Repository propre (recommand√©)
"@
    exit 0
}

# Lancer le script
Start-Release
