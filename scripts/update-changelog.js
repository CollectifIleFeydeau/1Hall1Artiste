#!/usr/bin/env node

import fs from 'fs';
import path from 'path';

// R√©cup√©rer le type de version depuis les arguments
const versionType = process.argv[2];
if (!versionType || !['patch', 'minor', 'major'].includes(versionType)) {
  console.error('‚ùå Usage: node update-changelog.js [patch|minor|major]');
  process.exit(1);
}

// Lire la version actuelle depuis package.json
const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
const newVersion = packageJson.version;

// Lire le CHANGELOG actuel
const changelogPath = 'CHANGELOG.md';
let changelog = fs.readFileSync(changelogPath, 'utf8');

// Obtenir la date actuelle au format YYYY-MM-DD
const today = new Date().toISOString().split('T')[0];

// Cr√©er l'entr√©e de version
const versionHeader = `## [${newVersion}] - ${today}`;

// Remplacer la section [Non publi√©] par la nouvelle version
const nonPublishedRegex = /## \[Non publi√©\]\s*([\s\S]*?)(?=## \[|\n---|\n## L√©gende|$)/;
const match = changelog.match(nonPublishedRegex);

if (!match) {
  console.error('‚ùå Section [Non publi√©] non trouv√©e dans le CHANGELOG');
  process.exit(1);
}

const nonPublishedContent = match[1].trim();

if (!nonPublishedContent || nonPublishedContent === '') {
  console.error('‚ùå Aucun changement dans la section [Non publi√©]');
  console.log('üí° Ajoutez vos changements dans la section [Non publi√©] du CHANGELOG.md avant de cr√©er une version');
  process.exit(1);
}

// Cr√©er la nouvelle section [Non publi√©] vide
const newNonPublished = `## [Non publi√©]

### Ajout√©

### Modifi√©

### Corrig√©

### Supprim√©

`;

// Cr√©er la nouvelle entr√©e de version
const newVersionEntry = `${versionHeader}

${nonPublishedContent}

`;

// Remplacer dans le changelog
const updatedChangelog = changelog.replace(
  nonPublishedRegex,
  newNonPublished + newVersionEntry
);

// √âcrire le nouveau CHANGELOG
fs.writeFileSync(changelogPath, updatedChangelog);

// Mettre √† jour la version dans VersionBadge.tsx
const versionBadgePath = 'src/components/VersionBadge.tsx';
if (fs.existsSync(versionBadgePath)) {
  let versionBadgeContent = fs.readFileSync(versionBadgePath, 'utf8');
  
  // Remplacer la version dans le composant
  const versionRegex = /const version = '[^']+'/;
  versionBadgeContent = versionBadgeContent.replace(versionRegex, `const version = '${newVersion}'`);
  
  fs.writeFileSync(versionBadgePath, versionBadgeContent);
  console.log(`‚úÖ Version mise √† jour dans VersionBadge.tsx: ${newVersion}`);
}

console.log(`‚úÖ CHANGELOG mis √† jour avec la version ${newVersion}`);

try {
  const versionInfoPath = 'src/components/admin/VersionInfo.tsx';
  let versionInfoContent = fs.readFileSync(versionInfoPath, 'utf8');
  
  const versionRegex = /const APP_VERSION = '[^']+';/;
  const newVersionLine = `const APP_VERSION = '${newVersion}';`;
  
  if (versionRegex.test(versionInfoContent)) {
    versionInfoContent = versionInfoContent.replace(versionRegex, newVersionLine);
    fs.writeFileSync(versionInfoPath, versionInfoContent);
    console.log(`‚úÖ VersionInfo.tsx mis √† jour`);
  } else {
    console.warn('‚ö†Ô∏è  Impossible de mettre √† jour VersionInfo.tsx automatiquement');
  }
} catch (error) {
  console.warn('‚ö†Ô∏è  Erreur lors de la mise √† jour de VersionInfo.tsx:', error.message);
}

// Messages de succ√®s avec √©mojis selon le type
const messages = {
  patch: 'üêõ Version patch cr√©√©e',
  minor: '‚ú® Version minor cr√©√©e', 
  major: 'üöÄ Version major cr√©√©e'
};

console.log(`${messages[versionType]}: v${newVersion}`);
console.log(`üìù CHANGELOG.md mis √† jour`);
console.log(`üìÖ Date: ${today}`);
console.log('');
console.log('üîÑ Prochaines √©tapes:');
console.log('1. V√©rifiez le CHANGELOG.md');
console.log('2. Commitez les changements: git add . && git commit -m "chore: bump version to v' + newVersion + '"');
console.log('3. Cr√©ez un tag: git tag v' + newVersion);
console.log('4. Poussez: git push && git push --tags');
