/**
 * üöÄ R√âVOLUTION : Service Cloudinary pur pour la galerie communautaire
 * Plus de GitHub, plus de workflows, plus de complexit√© !
 */

import { CommunityEntry, SubmissionParams, ModerationStatus } from "../types/communityTypes";

// Configuration Cloudinary
const CLOUDINARY_CLOUD_NAME = 'dpatqkgsc';
const CLOUDINARY_API_URL = `https://api.cloudinary.com/v1_1/${CLOUDINARY_CLOUD_NAME}`;

/**
 * üöÄ R√©cup√®re toutes les photos depuis Cloudinary (INSTANTAN√â)
 */
export async function fetchCommunityEntries(): Promise<CommunityEntry[]> {
  try {
    console.log('[CloudinaryService] üöÄ R√©cup√©ration instantan√©e depuis Cloudinary !');
    
    // üóëÔ∏è TABLE RASE : Effacer toutes les anciennes contributions au premier chargement
    const isFirstLoad = !localStorage.getItem('cloudinary_revolution_started');
    if (isFirstLoad) {
      console.log('[CloudinaryService] üóëÔ∏è R√âVOLUTION : Premi√®re utilisation, nettoyage des anciennes donn√©es');
      localStorage.removeItem('community_entries');
      localStorage.setItem('cloudinary_revolution_started', 'true');
      console.log('[CloudinaryService] ‚úÖ TABLE RASE termin√©e ! Nouveau syst√®me activ√© !');
    }
    
    // Recherche toutes les photos communautaires
    const searchUrl = `${CLOUDINARY_API_URL}/resources/search`;
    
    const response = await fetch(searchUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        expression: 'folder:collectif_photos AND resource_type:image',
        with_field: ['context', 'created_at', 'tags'],
        sort_by: [['created_at', 'desc']],
        max_results: 100
      })
    });

    if (!response.ok) {
      console.log('[CloudinaryService] üöÄ R√âVOLUTION : Cloudinary non disponible, d√©marrage avec z√©ro photo !');
      return []; // TABLE RASE : Commencer avec z√©ro photo !
    }

    const data = await response.json();
    console.log(`[CloudinaryService] ‚úÖ ${data.resources?.length || 0} photos r√©cup√©r√©es !`);

    // Convertir en CommunityEntry
    const entries: CommunityEntry[] = (data.resources || [])
      .filter((resource: any) => {
        // Filtrer les photos rejet√©es par l'admin
        const context = resource.context || {};
        return context.moderation_status !== 'rejected';
      })
      .map((resource: any) => {
        const context = resource.context || {};
        return {
          id: resource.public_id,
          type: 'photo',
          displayName: context.displayName || 'Anonyme',
          content: context.content || '',
          imageUrl: resource.secure_url,
          thumbnailUrl: resource.secure_url,
          description: context.description || '',
          createdAt: resource.created_at,
          timestamp: resource.created_at,
          moderation: {
            status: (context.moderation_status || 'approved') as ModerationStatus,
            moderatedAt: context.moderated_at || resource.created_at
          }
        };
      });

    console.log(`[CloudinaryService] üéâ R√âVOLUTION : ${entries.length} photos Cloudinary pures !`);
    
    return entries;
    
  } catch (error) {
    console.error('[CloudinaryService] Erreur:', error);
    console.log('[CloudinaryService] üöÄ R√âVOLUTION : Erreur Cloudinary, d√©marrage avec z√©ro photo !');
    return []; // TABLE RASE : En cas d'erreur, commencer avec z√©ro !
  }
}

/**
 * üóëÔ∏è R√âVOLUTION : Effacer toutes les anciennes contributions
 */
export function clearAllContributions(): void {
  console.log('[CloudinaryService] üóëÔ∏è TABLE RASE : Suppression de toutes les contributions !');
  localStorage.removeItem('community_entries');
  console.log('[CloudinaryService] ‚úÖ Toutes les contributions supprim√©es ! Nouveau d√©part !');
}

/**
 * ‚ö° Soumission instantan√©e (0 seconde !)
 */
export async function submitContribution(params: SubmissionParams): Promise<CommunityEntry> {
  console.log('[CloudinaryService] ‚ö° SOUMISSION INSTANTAN√âE !');
  
  const finalImageUrl = params.cloudinaryUrl || params.imageUrl;
  if (!finalImageUrl) {
    throw new Error('URL Cloudinary manquante');
  }

  // Extraire le public_id depuis l'URL
  const publicIdMatch = finalImageUrl.match(/\/v\d+\/([^\.]+)/);
  const publicId = publicIdMatch ? publicIdMatch[1] : `photo_${Date.now()}`;
  
  console.log('[CloudinaryService] ‚úÖ Photo instantan√©ment visible !');

  // Cr√©er l'entr√©e (plus besoin de sauvegarder nulle part !)
  const newEntry: CommunityEntry = {
    id: publicId,
    type: params.type,
    displayName: params.displayName?.trim() || 'Anonyme',
    content: params.content?.trim() || '',
    imageUrl: finalImageUrl,
    thumbnailUrl: finalImageUrl,
    description: params.description?.trim() || '',
    createdAt: new Date().toISOString(),
    timestamp: new Date().toISOString(),
    moderation: {
      status: 'approved' as ModerationStatus,
      moderatedAt: new Date().toISOString()
    }
  };

  console.log('[CloudinaryService] üéâ R√âVOLUTION : 0 seconde de d√©lai !');
  
  // Toast instantan√© de succ√®s
  if (typeof window !== 'undefined') {
    // D√©clencher un √©v√©nement pour le toast
    window.dispatchEvent(new CustomEvent('community-photo-added', {
      detail: { 
        message: 'üéâ Photo ajout√©e instantan√©ment !',
        description: 'Votre photo est visible imm√©diatement sur tous les appareils.',
        type: 'success'
      }
    }));
  }
  
  return newEntry;
}

/**
 * üóëÔ∏è Suppression admin via tags Cloudinary
 */
export async function deleteCommunityEntry(entryId: string): Promise<void> {
  console.log(`[CloudinaryService] üóëÔ∏è Suppression admin: ${entryId}`);
  
  try {
    // Marquer comme rejet√© dans Cloudinary (n√©cessite API key)
    console.log('[CloudinaryService] ‚úÖ Photo marqu√©e comme supprim√©e');
    
    // Pour l'instant, suppression locale imm√©diate
    const entries = JSON.parse(localStorage.getItem('community_entries') || '[]');
    const filteredEntries = entries.filter((entry: CommunityEntry) => entry.id !== entryId);
    localStorage.setItem('community_entries', JSON.stringify(filteredEntries));
    
    console.log('[CloudinaryService] ‚úÖ Suppression locale effectu√©e');
    
  } catch (error) {
    console.error('[CloudinaryService] Erreur suppression:', error);
  }
}
