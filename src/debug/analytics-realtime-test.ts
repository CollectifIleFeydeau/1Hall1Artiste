/**
 * Test en temps r√©el pour Google Analytics
 * Permet de v√©rifier si les √©v√©nements sont envoy√©s imm√©diatement
 */

import { analytics, EventCategory, EventAction } from '../services/firebaseAnalytics';
import { getFirebaseAnalytics } from '../services/firebaseConfig';
import { runAndLogDiagnostics } from './analytics-diagnostics';

/**
 * V√©rifie l'√©tat de Google Analytics
 */
export const checkAnalyticsStatus = async () => {
  console.group('üîç Diagnostic Google Analytics');
  
  // V√©rifier l'instance Firebase Analytics
  const analyticsInstance = getFirebaseAnalytics();
  console.log('üî• Instance Firebase Analytics:', analyticsInstance ? '‚úÖ Initialis√©e' : '‚ùå Non initialis√©e');
  
  // V√©rifier les variables d'environnement
  console.log('üîë Variables d\'environnement:');
  console.log('  - VITE_FIREBASE_API_KEY:', import.meta.env.VITE_FIREBASE_API_KEY ? '‚úÖ D√©finie' : '‚ùå Manquante');
  console.log('  - Mode DEV:', import.meta.env.DEV ? '‚úÖ Activ√©' : '‚ùå D√©sactiv√©');
  
  // V√©rifier le mode debug
  const debugParams = new URLSearchParams(window.location.search);
  const hasDebugParam = debugParams.has('firebase_debug') || debugParams.has('gtm_debug');
  console.log('üêõ Mode debug:', hasDebugParam ? '‚úÖ Activ√©' : '‚ùå D√©sactiv√©');
  
  // Ex√©cuter le diagnostic complet
  console.log('üîç Ex√©cution du diagnostic complet...');
  const diagnostics = await runAndLogDiagnostics();
  
  console.groupEnd();
  return {
    analyticsInstance: !!analyticsInstance,
    hasApiKey: !!import.meta.env.VITE_FIREBASE_API_KEY,
    debugMode: hasDebugParam,
    diagnostics
  };
};

/**
 * Teste l'envoi d'√©v√©nements en temps r√©el
 */
export const testAnalyticsRealTime = async () => {
  console.group('üî¥ Test Google Analytics Temps R√©el');
  
  // V√©rifier d'abord l'√©tat d'Analytics
  const status = await checkAnalyticsStatus();
  if (!status.analyticsInstance) {
    console.error('‚ùå Analytics non initialis√©, impossible de continuer');
    console.groupEnd();
    return null;
  }
  
  const timestamp = new Date().toISOString();
  const testId = Math.random().toString(36).substring(7);
  
  console.log(`üöÄ Envoi d'√©v√©nements de test (ID: ${testId})`);
  console.log(`‚è∞ Timestamp: ${timestamp}`);
  
  // Test 1: Page view
  try {
    analytics.trackPageView('/test-realtime', `Test Temps R√©el ${testId}`);
    console.log('‚úÖ 1. Page view envoy√©');
  } catch (error) {
    console.error('‚ùå 1. Erreur page view:', error);
  }
  
  // Test 2: Interaction utilisateur
  try {
    analytics.trackInteraction(EventAction.CLICK, 'test-realtime-button', {
      test_id: testId,
      timestamp: timestamp,
      realtime_test: true
    });
    console.log('‚úÖ 2. Interaction envoy√©e');
  } catch (error) {
    console.error('‚ùå 2. Erreur interaction:', error);
  }
  
  // Test 3: √âv√©nement personnalis√©
  try {
    analytics.trackEvent(EventCategory.FEATURE, EventAction.FEATURE_USE, {
      feature_name: 'realtime_analytics_test',
      test_id: testId,
      timestamp: timestamp,
      user_agent: navigator.userAgent.substring(0, 50)
    });
    console.log('‚úÖ 3. √âv√©nement personnalis√© envoy√©');
  } catch (error) {
    console.error('‚ùå 3. Erreur √©v√©nement personnalis√©:', error);
  }
  
  // Test 4: √âv√©nement communautaire
  try {
    analytics.trackCommunityInteraction(EventAction.VIEW, {
      content_type: 'realtime_test',
      test_id: testId,
      timestamp: timestamp
    });
    console.log('‚úÖ 4. √âv√©nement communautaire envoy√©');
  } catch (error) {
    console.error('‚ùå 4. Erreur √©v√©nement communautaire:', error);
  }
  
  console.log('');
  console.log('üìä Pour v√©rifier en temps r√©el:');
  console.log('1. Ouvrez Google Analytics 4: https://analytics.google.com/');
  console.log('2. S√©lectionnez la propri√©t√© Collectif Feydeau');
  console.log('3. Allez dans Rapports > Temps r√©el > Vue d\'ensemble');
  console.log(`4. Cherchez les √©v√©nements avec test_id: ${testId}`);
  console.log('5. Les √©v√©nements devraient appara√Ætre dans les 10-60 secondes');
  console.log('6. Si rien n\'appara√Æt, v√©rifiez la configuration avec checkAnalyticsStatus()');
  
  console.groupEnd();
  
  return testId;
};

/**
 * Lance une s√©rie de tests espac√©s dans le temps
 */
export const testAnalyticsRealTimeSequence = async () => {
  console.log('üîÑ D√©marrage de la s√©quence de tests temps r√©el...');
  
  // Test imm√©diat
  const testId1 = await testAnalyticsRealTime();
  
  // Test apr√®s 10 secondes
  setTimeout(async () => {
    console.log('‚è∞ Test apr√®s 10 secondes...');
    await testAnalyticsRealTime();
  }, 10000);
  
  // Test apr√®s 30 secondes
  setTimeout(async () => {
    console.log('‚è∞ Test apr√®s 30 secondes...');
    await testAnalyticsRealTime();
  }, 30000);
  
  // Test apr√®s 1 minute
  setTimeout(async () => {
    console.log('‚è∞ Test apr√®s 1 minute...');
    await testAnalyticsRealTime();
  }, 60000);
  
  return testId1;
};

/**
 * Expose les fonctions de test dans la console pour utilisation manuelle
 */
if (typeof window !== 'undefined' && import.meta.env.DEV) {
  (window as any).checkAnalyticsStatus = checkAnalyticsStatus;
  (window as any).testAnalyticsRealTime = testAnalyticsRealTime;
  (window as any).testAnalyticsRealTimeSequence = testAnalyticsRealTimeSequence;
  
  console.log('üîß Fonctions de test Analytics disponibles:');
  console.log('- checkAnalyticsStatus() : V√©rifier l\'installation');
  console.log('- testAnalyticsRealTime() : Test unique');
  console.log('- testAnalyticsRealTimeSequence() : S√©quence de tests');
}

